#include <ArduinoJson.h>
#include "connectionManager.h"

// for WiFi, LoRa and mqtt

#include <WiFiManager.h> 
#include "WiFi.h"
#include "WiFiGeneric.h"
#include "WiFiSTA.h"


#include <LoRa.h>
#include <PubSubClient.h>   // for Mqtt

#include "app_config.h"     // for Custom Configration
#include "receiverBoard.h"


#define BAND    433E6
#define SCK     5
#define MISO    19
#define MOSI    27
#define CS      18

#define SS      18
#define RST     14
#define DI0     26

/*  */

String BOARD_ID;
WiFiClient wifiClient;
// const char* mqttServer = SERVER;
// PubSubClient pub_sub_client(mqttServer, 1883, NULL, wifiClient);
PubSubClient pub_sub_client(wifiClient);
WiFiManager wm; // WiFi Manager 

String sub_topic = SUB_TOPIC;
String pub_topic = PUB_TOPIC;
char server[] = SERVER;
char mqttUser[] = MQTT_USER;
char mqttPassword[] = MQTT_PASSWORD;


/* constructor implementation */

connectionManager * const connectionManager_ctor(connectionManager * const me ) {
   return me;
}

/* Function implementation */

void mqtt_loop(){
  
    if (!pub_sub_client.connected())  reconnect_mqtt();
    pub_sub_client.loop();
}

void reconnect_mqtt() {

    String clientId = "d:" ORG ":" BOARD_TYPE ":" +BOARD_ID;

     while (!pub_sub_client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (pub_sub_client.connect((char*) clientId.c_str(), mqttUser, mqttPassword)) {
      Serial.println("connected");
      pub_sub_client.subscribe(sub_topic.c_str());
    } else {
      Serial.print("failed, rc=");
      Serial.print(pub_sub_client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void initWiFi() {
  WiFi.mode(WIFI_STA); // explicitly set mode, esp defaults to STA+AP  
  //wm.setWiFiAutoReconnect(true);
}

/**
 * Connect to MQTT Server
 */
 bool connectMQTT(connectionManager * con) {
  
  if(con->Wifi_status){
    if(BOARD_ID == ""){
      BOARD_ID = "HB_" +String(getBoard_ID());  
    }
    // BOARD_ID = "HB_2552610648";
    
    String clientId = "d:" ORG ":" BOARD_TYPE ":" +BOARD_ID;
    Serial.print("Connecting MQTT client: ");
    Serial.println(clientId);
    // mqttConnected = client.connect((char*) clientId.c_str(), token, "");
  //  pub_sub_client.username_pw_set(mqttUser, mqttPassword);
    pub_sub_client.setServer(server, 1883);
    pub_sub_client.setCallback(mqttCallback);
    con->mqtt_status = pub_sub_client.connect((char*) clientId.c_str(), mqttUser, mqttPassword);
    Serial.println("MQTT Status: >>>> ");
    Serial.print(pub_sub_client.state());
          
    if(con->mqtt_status){
      digitalWrite(MQTT_LED,LOW);   
      pub_sub_client.subscribe(sub_topic.c_str());
      Serial.print("Subscribed to : >>  ");
      Serial.println(sub_topic);
    }else {
      digitalWrite(MQTT_LED,HIGH);
      Serial.print("Error connecting to MQTT, state: ");
      Serial.println(pub_sub_client.state());
      // delay(5000);
    }
     
     con->mqtt_status = true;
     // Serial.println(mqttConnected);
  }else{
    digitalWrite(MQTT_LED,HIGH);
    Serial.println("Cannot connect to MQTT as WiFi is not Connected !!");
  }
  return con->mqtt_status;
}

void reconnectWiFi(connectionManager  * con){
  bool res;
  res = wm.autoConnect("Tank_Board"); // anonymous ap
    if(!res) {
        con->Wifi_status = false;
        digitalWrite(WIFI_LED,HIGH);
        Serial.println("Failed to connect");
        delay(3000);
      //  ESP.restart();
        delay(5000);
    } 
    else {
        //if you get here you have connected   to the WiFi  
        digitalWrite(WIFI_LED,LOW);  
        con->Wifi_status = true;   
      //  Serial.println("Wifi connected...yeey :)");       
    }
}

bool connectWiFi(connectionManager * con) {
  bool res;
  digitalWrite(HEARTBEAT_LED,LOW);  
  wm.setConnectTimeout(120);
  res = wm.autoConnect("Tank"); // auto generated AP name from chipid
  
    if(res) {
      //if you get here you have connected to the WiFi         
        con->Wifi_status = true;
        digitalWrite(HEARTBEAT_LED,HIGH);
        digitalWrite(WIFI_LED,LOW);   
      //  Serial.println("Wifi connected...yeey :)");           
    }
    return res;
}

void resetWifi(connectionManager * con) {
    con->Wifi_status = false;
    wm.resetSettings(); // reset settings - wipe stored credentials for testing, these are stored by the esp library
    digitalWrite(WIFI_LED,HIGH);
}

void initRadio(connectionManager * con){
  SPI.begin(SCK, MISO, MOSI, CS);
  LoRa.setPins(SS, RST, DI0);
      delay(1000);

      int radioTryCount = 0;      
      do{
        con->radio_status = LoRa.begin(BAND);
        radioTryCount++;
        if(!con->radio_status){
          Serial.printf("Starting Radio failed!, Try Count: %d\n", radioTryCount);
          delay(3000);
        }else{
          Serial.println("Radio Initialized Successfully...");
        }
      }while(!con->radio_status && radioTryCount < 3);

}

char* string2char(String str){
  char *p;
    if(str.length()!=0) {
        p = const_cast<char*>(str.c_str());
    }
    return p;
}

 void publishOnRadio(String data, connectionManager * con){
    // bool published = false;

    // if(con->radio_status && !published){
    //     LoRa.beginPacket();

    //     LoRa.print(data);
    //     LoRa.print("\n");
    //     LoRa.endPacket();

    //     delay(1);
    //     LoRa.flush();
    // }else{
    //    Serial.print("Radio Not Available: >> ");
    // }
}

void checkDataOnRadio(){
  String receivedText;
  // try to parse packet
    int packetSize = LoRa.parsePacket();
    if (packetSize) {
        // received a packet
        // Serial.print("Received packet '");
        // read packet
        while (LoRa.available()) {
          receivedText = (char)LoRa.read();
          Serial.print(receivedText);
        }

        // print RSSI of packet
        // Serial.print("' with RSSI ");
        //// Serial.println(LoRa.packetRssi());
    }
}

//  mqtt methods
void mqttCallback(char* topic, byte* inc_msg, unsigned int length) {
  String action;
  Serial.print("Message arrived in topic [");
  Serial.print(topic);
  Serial.print("] ");

/*
  String payload;
  StaticJsonBuffer<200> dataJsonBuffer;
  JsonObject& root = dataJsonBuffer.createObject();
*/
  StaticJsonDocument<200> jsonData;

  deserializeJson(jsonData, inc_msg);

   action  = jsonData["Action"].as<String>();
  //msg["Action"] = jsonData["Action"].as<String>();
  //  example of data recieve {"Action":"update",updateConfig":"TankCapacity","value":15}

  Serial.print(" >>> type: ");
  //Serial.println(jsonData);
  Serial.print(action);

/*
  Serial.print(", uniqueId: ");
  Serial.print(jsonData["uniqueId"].as<String>());
  Serial.print(", deviceIndex: ");
  Serial.print(jsonData["deviceIndex"].as<int>());
  Serial.print(", deviceValue: ");
  Serial.println(jsonData["deviceValue"].as<int>());

  if(jsonData["type"].as<String>() == BOARD_TYPE && jsonData["uniqueId"].as<String>() == BOARD_ID){
    Serial.println("<<<< SWITCH ACTION ON BOARD MATCHES >>>>");
    int deviceIndex = jsonData["deviceIndex"].as<int>();
    int deviceValue = jsonData["deviceValue"].as<int>();

    int deviceAction = 1;
    if(deviceValue == 1){
      deviceAction = 0;
    }

    switch (deviceIndex) {
      case 1:
          digitalWrite(SW_pin, deviceAction);          
          // switch_value = deviceAction;
        break;
      default:
        Serial.println("Device index not matched .... ");
      }
   }
*/
 //  mqttDataBuffer.clear();
}

/**
 * Create unique device name from MAC address
 **/
/*
void createName() {
	uint8_t baseMac[6];
	// Get MAC address for WiFi station
	esp_read_mac(baseMac, ESP_MAC_WIFI_STA);
	// Write unique name into apName
	sprintf(apName, "SB_MICRO-%02X%02X%02X%02X%02X%02X", baseMac[0], baseMac[1], baseMac[2], baseMac[3], baseMac[4], baseMac[5]);

  BOARD_ID = String(apName);
  // pub_topic = PUBSUB_PREFIX + BOARD_ID +"/evt/cloud/fmt/json";
  // sub_topic = PUBSUB_PREFIX + BOARD_ID +"/cmd/device/fmt/json";
  // strcat(sub_topic, BOARD_ID.c_str() );
  // strcat(pub_topic, BOARD_ID.c_str() );
}
*/



void publishOnMqtt(String data, connectionManager * con) {

   bool published = false;
   
     if(pub_sub_client.publish(pub_topic.c_str(), (char*) data.c_str())){
       Serial.print("Published payload to Topic[");
       Serial.print(pub_topic);
       Serial.print("]: ");
       Serial.println(data);
       published = true;
     }else{
       Serial.print("Publish failed: \t");
          if (!!!pub_sub_client.connected() && MQTT_AVAILABILITY) {
            Serial.print(" Wifi : ");
            Serial.print(con->Wifi_status);
            Serial.print("\t");
            Serial.print(" mqtt : ");
            Serial.println(con->mqtt_status);

            connectMQTT(con);
          }
       // Serial.println(data);
     }
  
}

void publishData(String data, connectionManager * con) {
 
    if(con->radio_status) {
      publishOnRadio(data,con);
    }
  
    if (con->mqtt_status) {
       publishOnMqtt(data, con);
    } 
       
}
     


void print_communication() {
     Serial.println("from Communication_lib");
  }